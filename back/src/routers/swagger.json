{
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "TacoLover",
      "description": "TacoLover pour les amoureux des plats mexicain",
      "termsOfService": "http://swagger.io/terms/",
      "contact": { "name": "TacoLover" },
      "license": { "name": "MIT" }
    },
    "host": "localhost:3000",
    "basePath": "/api",
    "schemes": ["http"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "tags": [
      {"name": "Menu", "description": "Liste des menus de la franchise TacoLover"},
      {"name": "Plat", "description": "Liste des plats de la franchise TacoLover"},
      {"name": "Drink", "description": "Liste des boissons de la franchise TacoLover"},
      {"name": "Dessert", "description": "Liste des desserts de la franchise TacoLover"},
      {"name": "Restaurant", "description": "Liste des restaurant de la franchise TacoLover"},
      {"name": "Tag", "description": "Liste des tags de la franchise TacoLover"},
      {"name": "User", "description": "Liste des utilisateur de la franchise TacoLover"}
    ],
    "paths": {
      "/desserts": {
        "get": {
          "tags": ["Dessert"],
          "description": "Retourne l'ensemble des desserts existantes ordonné par leur id. \n \n ``` SELECT id, title, price_in_euro, img, created_at, updated_at FROM dessert AS Dessert ORDER BY Dessert.id```" ,
          "operationId": "getAllDesserts",
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "Les desserts on bien été trouver"
            },
            "404": {
                "description": "Le nom de la route na pas été trouver",
                "schema": {
                  "properties": {
                    "error": { "type": "string", "example": "/desserts not found" }
                  }
                }
            }
          }
        }, 
        "post": {
          "tags": ["Dessert"],
          "description": "Créer un nouveau Dessert. \n \n ```INSERT INTO dessert (id,title,price_in_euro,img,created_at,updated_at) VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING id,title,price_in_euro,img,created_at,updated_at;```",
          "operationId": "createdDessert",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Exemple pour la creation d'un dessert",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "example": "Nom du dessert" },
                  "price_in_euro": { "type": "number", "example": "1" }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Le dessert a bien été créer"
            },
            "400": {
              "description": "Le dessert na pas pu etre creér",
              "schema": {
                "properties": {
                  "error": { "type": "string", "example": "Joi error message" }
                }
              }
            }
          }
        }
      },
      "/desserts/{id}": {
        "get": {
            "tags": ["Dessert"],
            "description": "Retourn le dessert via son Id. \n \n ```SELECT id, title, price_in_euro, img, created_at, updated_at FROM dessert AS Dessert WHERE Dessert.id = 1 ORDER BY Dessert.id;```",
            "operationId": "getOneDessert",
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "L'ID du dessert a chercher",
                "type": "string"
              }],
            "responses": {
              "200": {
                "description": "Le dessert à été trouver via l'id"
              },
              "400": {
                "description": "L'ID fourni n'est pas un nombre'",
                "schema": {
                  "properties": {
                    "error": { "type": "string", "example": "Dessert ID should be a valid integer" }
                  }
                }
              },
              "404": {
                  "description": "L'ID fourni ne correspond à aucune dessert",
                  "schema": {
                    "properties": {
                      "error": { "type": "string", "example": "Dessert not found. Please verify the provided id." }
                    }
                  }
              }
            }
        },
        "patch": {
          "tags": ["Dessert"],
          "description": "Modifier un dessert existante. \n \n ```UPDATE dessert SET title=$1,price_in_euro=$2,updated_at=$3 WHERE id = $4```",
          "operationId": "updatedDessert",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "L'ID du dessert à modifier",
              "type": "string"
            },
            {
             "in": "body",
              "name": "body",
              "description": "Exemple pour l'update d'un dessert",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "example": "Nom du dessert" },
                  "price_in_euro": { "type": "number", "example": "1" }
                }
              }
          }],
          "responses": {
            "200": {
              "description": "Le dessert à été mis à jour"
            },
            "400": {
              "description": "L'ID fourni n'est pas un nombre'",
              "schema": {
                "properties": {
                  "error": { "type": "string", "example": "Dessert ID should be a valid integer" }
                }
              }
            },
            "404": {
                "description": "L'ID fourni ne correspond à aucune dessert",
                "schema": {
                  "properties": {
                    "error": { "type": "string", "example": "Dessert not found. Please verify the provided id." }
                  }
                }
            }
          }
        },
        "delete": {
        "tags": ["Dessert"],
        "description": "Supprimer un dessert existant. \n \n ```DELETE FROM dessert WHERE id = 1```",
        "operationId": "deletedDessert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "L'ID du dessert à supprimer",
            "type": "string"
          }],
        "responses": {
          "204": {
            "description": "Le dessert à été supprimer"
          },
          "400": {
            "description": "L'ID fourni n'est pas un nombre'",
            "schema": {
              "properties": {
                "error": { "type": "string", "example": "Dessert ID should be a valid integer" }
              }
            }
          },
          "404": {
              "description": "L'ID fourni ne correspond à aucune dessert",
              "schema": {
                "properties": {
                  "error": { "type": "string", "example": "Dessert not found. Please verify the provided id." }
                }
              }
          }
        }}
      },
      "/menus": {
        "get": {
          "tags": ["Menu"],
          "description": "Retourne l'ensemble des desserts existantes ordonné par leur id. \n \n ``` SELECT id, title, price_in_euro, img, created_at, updated_at FROM dessert AS Dessert ORDER BY Dessert.id```" ,
          "operationId": "getAllDesserts",
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "Les desserts on bien été trouver"
            },
            "404": {
                "description": "Le nom de la route na pas été trouver",
                "schema": {
                  "properties": {
                    "error": { "type": "string", "example": "/desserts not found" }
                  }
                }
            }
          }
        }, 
        "post": {
          "tags": ["Menu"],
          "description": "Créer un nouveau Dessert. \n \n ```INSERT INTO dessert (id,title,price_in_euro,img,created_at,updated_at) VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING id,title,price_in_euro,img,created_at,updated_at;```",
          "operationId": "createdDessert",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Exemple pour la creation d'un dessert",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "example": "Nom du dessert" },
                  "price_in_euro": { "type": "number", "example": "1" }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Le Dessert a bien été créer"
            },
            "400": {
              "description": "Le dessert na pas pu etre creér",
              "schema": {
                "properties": {
                  "error": { "type": "string", "example": "Joi error message" }
                }
              }
            }
          }
        }
      }
    },
  
  
    "definitions": {
  
      "Dessert": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 25 },
          "title": { "type": "string", "example": "Nom du Dessert" },
          "price_in_euro": { "type": "number", "example": "1" },
          "img": { "type": "string", "example": "dataUri" },
          "created_at": { "type": "string", "format": "date-time", "example": "2022-01-01T12:00:00.000Z" },
          "updated_at": { "type": "string", "format": "date-time", "example": "2022-01-01T12:00:00.000Z" }
        }
      },
  
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Unexpected server error. Please try again later." }
        }
      }
    }
  }
  